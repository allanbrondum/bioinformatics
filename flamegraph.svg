<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="5459"><g><title>libsystem_kernel.dylib`close (401 samples, 7.35%)</title><rect x="0.0000%" y="325" width="7.3457%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="401"/><text x="0.2500%" y="335.50">libsystem_..</text></g><g><title>rosalind-cafa02e72d05c752`__rust_dealloc (1 samples, 0.02%)</title><rect x="7.3457%" y="325" width="0.0183%" height="15" fill="rgb(217,0,24)" fg:x="401" fg:w="1"/><text x="7.5957%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="7.4006%" y="309" width="0.0183%" height="15" fill="rgb(221,193,54)" fg:x="404" fg:w="1"/><text x="7.6506%" y="319.50"></text></g><g><title>rosalind-cafa02e72d05c752`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="7.4189%" y="309" width="0.0183%" height="15" fill="rgb(248,212,6)" fg:x="405" fg:w="1"/><text x="7.6689%" y="319.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::insert_intermediate (1 samples, 0.02%)</title><rect x="7.4373%" y="309" width="0.0183%" height="15" fill="rgb(208,68,35)" fg:x="406" fg:w="1"/><text x="7.6873%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="7.4373%" y="293" width="0.0183%" height="15" fill="rgb(232,128,0)" fg:x="406" fg:w="1"/><text x="7.6873%" y="303.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (1 samples, 0.02%)</title><rect x="7.4739%" y="229" width="0.0183%" height="15" fill="rgb(207,160,47)" fg:x="408" fg:w="1"/><text x="7.7239%" y="239.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (1 samples, 0.02%)</title><rect x="7.4922%" y="149" width="0.0183%" height="15" fill="rgb(228,23,34)" fg:x="409" fg:w="1"/><text x="7.7422%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (1 samples, 0.02%)</title><rect x="7.4922%" y="133" width="0.0183%" height="15" fill="rgb(218,30,26)" fg:x="409" fg:w="1"/><text x="7.7422%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (1 samples, 0.02%)</title><rect x="7.4922%" y="117" width="0.0183%" height="15" fill="rgb(220,122,19)" fg:x="409" fg:w="1"/><text x="7.7422%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (1 samples, 0.02%)</title><rect x="7.4922%" y="101" width="0.0183%" height="15" fill="rgb(250,228,42)" fg:x="409" fg:w="1"/><text x="7.7422%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="7.4922%" y="85" width="0.0183%" height="15" fill="rgb(240,193,28)" fg:x="409" fg:w="1"/><text x="7.7422%" y="95.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="7.4922%" y="69" width="0.0183%" height="15" fill="rgb(216,20,37)" fg:x="409" fg:w="1"/><text x="7.7422%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="7.4922%" y="53" width="0.0183%" height="15" fill="rgb(206,188,39)" fg:x="409" fg:w="1"/><text x="7.7422%" y="63.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.04%)</title><rect x="7.5105%" y="117" width="0.0366%" height="15" fill="rgb(217,207,13)" fg:x="410" fg:w="2"/><text x="7.7605%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (2 samples, 0.04%)</title><rect x="7.5105%" y="101" width="0.0366%" height="15" fill="rgb(231,73,38)" fg:x="410" fg:w="2"/><text x="7.7605%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.04%)</title><rect x="7.5105%" y="85" width="0.0366%" height="15" fill="rgb(225,20,46)" fg:x="410" fg:w="2"/><text x="7.7605%" y="95.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (1 samples, 0.02%)</title><rect x="7.5472%" y="117" width="0.0183%" height="15" fill="rgb(210,31,41)" fg:x="412" fg:w="1"/><text x="7.7972%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="7.5472%" y="101" width="0.0183%" height="15" fill="rgb(221,200,47)" fg:x="412" fg:w="1"/><text x="7.7972%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="7.5472%" y="85" width="0.0183%" height="15" fill="rgb(226,26,5)" fg:x="412" fg:w="1"/><text x="7.7972%" y="95.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (5 samples, 0.09%)</title><rect x="7.4922%" y="165" width="0.0916%" height="15" fill="rgb(249,33,26)" fg:x="409" fg:w="5"/><text x="7.7422%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (4 samples, 0.07%)</title><rect x="7.5105%" y="149" width="0.0733%" height="15" fill="rgb(235,183,28)" fg:x="410" fg:w="4"/><text x="7.7605%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (4 samples, 0.07%)</title><rect x="7.5105%" y="133" width="0.0733%" height="15" fill="rgb(221,5,38)" fg:x="410" fg:w="4"/><text x="7.7605%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (1 samples, 0.02%)</title><rect x="7.5655%" y="117" width="0.0183%" height="15" fill="rgb(247,18,42)" fg:x="413" fg:w="1"/><text x="7.8155%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="7.5655%" y="101" width="0.0183%" height="15" fill="rgb(241,131,45)" fg:x="413" fg:w="1"/><text x="7.8155%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="7.5655%" y="85" width="0.0183%" height="15" fill="rgb(249,31,29)" fg:x="413" fg:w="1"/><text x="7.8155%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="7.5655%" y="69" width="0.0183%" height="15" fill="rgb(225,111,53)" fg:x="413" fg:w="1"/><text x="7.8155%" y="79.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="7.5838%" y="133" width="0.0183%" height="15" fill="rgb(238,160,17)" fg:x="414" fg:w="1"/><text x="7.8338%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (1 samples, 0.02%)</title><rect x="7.5838%" y="117" width="0.0183%" height="15" fill="rgb(214,148,48)" fg:x="414" fg:w="1"/><text x="7.8338%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="7.5838%" y="101" width="0.0183%" height="15" fill="rgb(232,36,49)" fg:x="414" fg:w="1"/><text x="7.8338%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (1 samples, 0.02%)</title><rect x="7.5838%" y="85" width="0.0183%" height="15" fill="rgb(209,103,24)" fg:x="414" fg:w="1"/><text x="7.8338%" y="95.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (1 samples, 0.02%)</title><rect x="7.5838%" y="69" width="0.0183%" height="15" fill="rgb(229,88,8)" fg:x="414" fg:w="1"/><text x="7.8338%" y="79.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="7.5838%" y="53" width="0.0183%" height="15" fill="rgb(213,181,19)" fg:x="414" fg:w="1"/><text x="7.8338%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="7.5838%" y="37" width="0.0183%" height="15" fill="rgb(254,191,54)" fg:x="414" fg:w="1"/><text x="7.8338%" y="47.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.09%)</title><rect x="7.6021%" y="133" width="0.0916%" height="15" fill="rgb(241,83,37)" fg:x="415" fg:w="5"/><text x="7.8521%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (5 samples, 0.09%)</title><rect x="7.6021%" y="117" width="0.0916%" height="15" fill="rgb(233,36,39)" fg:x="415" fg:w="5"/><text x="7.8521%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (5 samples, 0.09%)</title><rect x="7.6021%" y="101" width="0.0916%" height="15" fill="rgb(226,3,54)" fg:x="415" fg:w="5"/><text x="7.8521%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (2 samples, 0.04%)</title><rect x="7.6937%" y="133" width="0.0366%" height="15" fill="rgb(245,192,40)" fg:x="420" fg:w="2"/><text x="7.9437%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (2 samples, 0.04%)</title><rect x="7.6937%" y="117" width="0.0366%" height="15" fill="rgb(238,167,29)" fg:x="420" fg:w="2"/><text x="7.9437%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.04%)</title><rect x="7.6937%" y="101" width="0.0366%" height="15" fill="rgb(232,182,51)" fg:x="420" fg:w="2"/><text x="7.9437%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (15 samples, 0.27%)</title><rect x="7.4922%" y="181" width="0.2748%" height="15" fill="rgb(231,60,39)" fg:x="409" fg:w="15"/><text x="7.7422%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (10 samples, 0.18%)</title><rect x="7.5838%" y="165" width="0.1832%" height="15" fill="rgb(208,69,12)" fg:x="414" fg:w="10"/><text x="7.8338%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (10 samples, 0.18%)</title><rect x="7.5838%" y="149" width="0.1832%" height="15" fill="rgb(235,93,37)" fg:x="414" fg:w="10"/><text x="7.8338%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (2 samples, 0.04%)</title><rect x="7.7304%" y="133" width="0.0366%" height="15" fill="rgb(213,116,39)" fg:x="422" fg:w="2"/><text x="7.9804%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.04%)</title><rect x="7.7304%" y="117" width="0.0366%" height="15" fill="rgb(222,207,29)" fg:x="422" fg:w="2"/><text x="7.9804%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (2 samples, 0.04%)</title><rect x="7.7304%" y="101" width="0.0366%" height="15" fill="rgb(206,96,30)" fg:x="422" fg:w="2"/><text x="7.9804%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.04%)</title><rect x="7.7304%" y="85" width="0.0366%" height="15" fill="rgb(218,138,4)" fg:x="422" fg:w="2"/><text x="7.9804%" y="95.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="7.7670%" y="149" width="0.0366%" height="15" fill="rgb(250,191,14)" fg:x="424" fg:w="2"/><text x="8.0170%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (2 samples, 0.04%)</title><rect x="7.7670%" y="133" width="0.0366%" height="15" fill="rgb(239,60,40)" fg:x="424" fg:w="2"/><text x="8.0170%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="7.7670%" y="117" width="0.0366%" height="15" fill="rgb(206,27,48)" fg:x="424" fg:w="2"/><text x="8.0170%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (2 samples, 0.04%)</title><rect x="7.7670%" y="101" width="0.0366%" height="15" fill="rgb(225,35,8)" fg:x="424" fg:w="2"/><text x="8.0170%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (2 samples, 0.04%)</title><rect x="7.7670%" y="85" width="0.0366%" height="15" fill="rgb(250,213,24)" fg:x="424" fg:w="2"/><text x="8.0170%" y="95.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (2 samples, 0.04%)</title><rect x="7.7670%" y="69" width="0.0366%" height="15" fill="rgb(247,123,22)" fg:x="424" fg:w="2"/><text x="8.0170%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.04%)</title><rect x="7.7670%" y="53" width="0.0366%" height="15" fill="rgb(231,138,38)" fg:x="424" fg:w="2"/><text x="8.0170%" y="63.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 0.13%)</title><rect x="7.8036%" y="149" width="0.1282%" height="15" fill="rgb(231,145,46)" fg:x="426" fg:w="7"/><text x="8.0536%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (7 samples, 0.13%)</title><rect x="7.8036%" y="133" width="0.1282%" height="15" fill="rgb(251,118,11)" fg:x="426" fg:w="7"/><text x="8.0536%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 0.13%)</title><rect x="7.8036%" y="117" width="0.1282%" height="15" fill="rgb(217,147,25)" fg:x="426" fg:w="7"/><text x="8.0536%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (1 samples, 0.02%)</title><rect x="7.9319%" y="149" width="0.0183%" height="15" fill="rgb(247,81,37)" fg:x="433" fg:w="1"/><text x="8.1819%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="7.9319%" y="133" width="0.0183%" height="15" fill="rgb(209,12,38)" fg:x="433" fg:w="1"/><text x="8.1819%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="7.9319%" y="117" width="0.0183%" height="15" fill="rgb(227,1,9)" fg:x="433" fg:w="1"/><text x="8.1819%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (28 samples, 0.51%)</title><rect x="7.4922%" y="197" width="0.5129%" height="15" fill="rgb(248,47,43)" fg:x="409" fg:w="28"/><text x="7.7422%" y="207.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (13 samples, 0.24%)</title><rect x="7.7670%" y="181" width="0.2381%" height="15" fill="rgb(221,10,30)" fg:x="424" fg:w="13"/><text x="8.0170%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (13 samples, 0.24%)</title><rect x="7.7670%" y="165" width="0.2381%" height="15" fill="rgb(210,229,1)" fg:x="424" fg:w="13"/><text x="8.0170%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (3 samples, 0.05%)</title><rect x="7.9502%" y="149" width="0.0550%" height="15" fill="rgb(222,148,37)" fg:x="434" fg:w="3"/><text x="8.2002%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.05%)</title><rect x="7.9502%" y="133" width="0.0550%" height="15" fill="rgb(234,67,33)" fg:x="434" fg:w="3"/><text x="8.2002%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (3 samples, 0.05%)</title><rect x="7.9502%" y="117" width="0.0550%" height="15" fill="rgb(247,98,35)" fg:x="434" fg:w="3"/><text x="8.2002%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.05%)</title><rect x="7.9502%" y="101" width="0.0550%" height="15" fill="rgb(247,138,52)" fg:x="434" fg:w="3"/><text x="8.2002%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;char as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="8.0051%" y="181" width="0.0183%" height="15" fill="rgb(213,79,30)" fg:x="437" fg:w="1"/><text x="8.2551%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.07%)</title><rect x="8.0234%" y="165" width="0.0733%" height="15" fill="rgb(246,177,23)" fg:x="438" fg:w="4"/><text x="8.2734%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (4 samples, 0.07%)</title><rect x="8.0234%" y="149" width="0.0733%" height="15" fill="rgb(230,62,27)" fg:x="438" fg:w="4"/><text x="8.2734%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (4 samples, 0.07%)</title><rect x="8.0234%" y="133" width="0.0733%" height="15" fill="rgb(216,154,8)" fg:x="438" fg:w="4"/><text x="8.2734%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (4 samples, 0.07%)</title><rect x="8.0234%" y="117" width="0.0733%" height="15" fill="rgb(244,35,45)" fg:x="438" fg:w="4"/><text x="8.2734%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (4 samples, 0.07%)</title><rect x="8.0234%" y="101" width="0.0733%" height="15" fill="rgb(251,115,12)" fg:x="438" fg:w="4"/><text x="8.2734%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (4 samples, 0.07%)</title><rect x="8.0234%" y="85" width="0.0733%" height="15" fill="rgb(240,54,50)" fg:x="438" fg:w="4"/><text x="8.2734%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`write (4 samples, 0.07%)</title><rect x="8.0234%" y="69" width="0.0733%" height="15" fill="rgb(233,84,52)" fg:x="438" fg:w="4"/><text x="8.2734%" y="79.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="8.0967%" y="149" width="0.0183%" height="15" fill="rgb(207,117,47)" fg:x="442" fg:w="1"/><text x="8.3467%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (30 samples, 0.55%)</title><rect x="8.0967%" y="165" width="0.5496%" height="15" fill="rgb(249,43,39)" fg:x="442" fg:w="30"/><text x="8.3467%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (29 samples, 0.53%)</title><rect x="8.1150%" y="149" width="0.5312%" height="15" fill="rgb(209,38,44)" fg:x="443" fg:w="29"/><text x="8.3650%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (29 samples, 0.53%)</title><rect x="8.1150%" y="133" width="0.5312%" height="15" fill="rgb(236,212,23)" fg:x="443" fg:w="29"/><text x="8.3650%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (3 samples, 0.05%)</title><rect x="8.6463%" y="165" width="0.0550%" height="15" fill="rgb(242,79,21)" fg:x="472" fg:w="3"/><text x="8.8963%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (3 samples, 0.05%)</title><rect x="8.6463%" y="149" width="0.0550%" height="15" fill="rgb(211,96,35)" fg:x="472" fg:w="3"/><text x="8.8963%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.05%)</title><rect x="8.6463%" y="133" width="0.0550%" height="15" fill="rgb(253,215,40)" fg:x="472" fg:w="3"/><text x="8.8963%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (85 samples, 1.56%)</title><rect x="7.4922%" y="213" width="1.5571%" height="15" fill="rgb(211,81,21)" fg:x="409" fg:w="85"/><text x="7.7422%" y="223.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (57 samples, 1.04%)</title><rect x="8.0051%" y="197" width="1.0441%" height="15" fill="rgb(208,190,38)" fg:x="437" fg:w="57"/><text x="8.2551%" y="207.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (56 samples, 1.03%)</title><rect x="8.0234%" y="181" width="1.0258%" height="15" fill="rgb(235,213,38)" fg:x="438" fg:w="56"/><text x="8.2734%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (19 samples, 0.35%)</title><rect x="8.7012%" y="165" width="0.3480%" height="15" fill="rgb(237,122,38)" fg:x="475" fg:w="19"/><text x="8.9512%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (19 samples, 0.35%)</title><rect x="8.7012%" y="149" width="0.3480%" height="15" fill="rgb(244,218,35)" fg:x="475" fg:w="19"/><text x="8.9512%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (19 samples, 0.35%)</title><rect x="8.7012%" y="133" width="0.3480%" height="15" fill="rgb(240,68,47)" fg:x="475" fg:w="19"/><text x="8.9512%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (19 samples, 0.35%)</title><rect x="8.7012%" y="117" width="0.3480%" height="15" fill="rgb(210,16,53)" fg:x="475" fg:w="19"/><text x="8.9512%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (15 samples, 0.27%)</title><rect x="9.0493%" y="181" width="0.2748%" height="15" fill="rgb(235,124,12)" fg:x="494" fg:w="15"/><text x="9.2993%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (15 samples, 0.27%)</title><rect x="9.0493%" y="165" width="0.2748%" height="15" fill="rgb(224,169,11)" fg:x="494" fg:w="15"/><text x="9.2993%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (15 samples, 0.27%)</title><rect x="9.0493%" y="149" width="0.2748%" height="15" fill="rgb(250,166,2)" fg:x="494" fg:w="15"/><text x="9.2993%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (15 samples, 0.27%)</title><rect x="9.0493%" y="133" width="0.2748%" height="15" fill="rgb(242,216,29)" fg:x="494" fg:w="15"/><text x="9.2993%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (15 samples, 0.27%)</title><rect x="9.0493%" y="117" width="0.2748%" height="15" fill="rgb(230,116,27)" fg:x="494" fg:w="15"/><text x="9.2993%" y="127.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (15 samples, 0.27%)</title><rect x="9.0493%" y="101" width="0.2748%" height="15" fill="rgb(228,99,48)" fg:x="494" fg:w="15"/><text x="9.2993%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (15 samples, 0.27%)</title><rect x="9.0493%" y="85" width="0.2748%" height="15" fill="rgb(253,11,6)" fg:x="494" fg:w="15"/><text x="9.2993%" y="95.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (150 samples, 2.75%)</title><rect x="9.3241%" y="181" width="2.7478%" height="15" fill="rgb(247,143,39)" fg:x="509" fg:w="150"/><text x="9.5741%" y="191.50">ro..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (150 samples, 2.75%)</title><rect x="9.3241%" y="165" width="2.7478%" height="15" fill="rgb(236,97,10)" fg:x="509" fg:w="150"/><text x="9.5741%" y="175.50">ro..</text></g><g><title>libsystem_kernel.dylib`write (150 samples, 2.75%)</title><rect x="9.3241%" y="149" width="2.7478%" height="15" fill="rgb(233,208,19)" fg:x="509" fg:w="150"/><text x="9.5741%" y="159.50">li..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (14 samples, 0.26%)</title><rect x="12.0718%" y="181" width="0.2565%" height="15" fill="rgb(216,164,2)" fg:x="659" fg:w="14"/><text x="12.3218%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (14 samples, 0.26%)</title><rect x="12.0718%" y="165" width="0.2565%" height="15" fill="rgb(220,129,5)" fg:x="659" fg:w="14"/><text x="12.3218%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (14 samples, 0.26%)</title><rect x="12.0718%" y="149" width="0.2565%" height="15" fill="rgb(242,17,10)" fg:x="659" fg:w="14"/><text x="12.3218%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (80 samples, 1.47%)</title><rect x="12.3283%" y="133" width="1.4655%" height="15" fill="rgb(242,107,0)" fg:x="673" fg:w="80"/><text x="12.5783%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="13.7937%" y="133" width="0.0183%" height="15" fill="rgb(251,28,31)" fg:x="753" fg:w="1"/><text x="14.0437%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (82 samples, 1.50%)</title><rect x="12.3283%" y="181" width="1.5021%" height="15" fill="rgb(233,223,10)" fg:x="673" fg:w="82"/><text x="12.5783%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (82 samples, 1.50%)</title><rect x="12.3283%" y="165" width="1.5021%" height="15" fill="rgb(215,21,27)" fg:x="673" fg:w="82"/><text x="12.5783%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (82 samples, 1.50%)</title><rect x="12.3283%" y="149" width="1.5021%" height="15" fill="rgb(232,23,21)" fg:x="673" fg:w="82"/><text x="12.5783%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`DYLD-STUB$$write (1 samples, 0.02%)</title><rect x="13.8121%" y="133" width="0.0183%" height="15" fill="rgb(244,5,23)" fg:x="754" fg:w="1"/><text x="14.0621%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (348 samples, 6.37%)</title><rect x="7.4922%" y="229" width="6.3748%" height="15" fill="rgb(226,81,46)" fg:x="409" fg:w="348"/><text x="7.7422%" y="239.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (263 samples, 4.82%)</title><rect x="9.0493%" y="213" width="4.8177%" height="15" fill="rgb(247,70,30)" fg:x="494" fg:w="263"/><text x="9.2993%" y="223.50">rosali..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (263 samples, 4.82%)</title><rect x="9.0493%" y="197" width="4.8177%" height="15" fill="rgb(212,68,19)" fg:x="494" fg:w="263"/><text x="9.2993%" y="207.50">rosali..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (2 samples, 0.04%)</title><rect x="13.8304%" y="181" width="0.0366%" height="15" fill="rgb(240,187,13)" fg:x="755" fg:w="2"/><text x="14.0804%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="13.8670%" y="213" width="0.0183%" height="15" fill="rgb(223,113,26)" fg:x="757" fg:w="1"/><text x="14.1170%" y="223.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (84 samples, 1.54%)</title><rect x="13.9036%" y="197" width="1.5387%" height="15" fill="rgb(206,192,2)" fg:x="759" fg:w="84"/><text x="14.1536%" y="207.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (84 samples, 1.54%)</title><rect x="13.9036%" y="181" width="1.5387%" height="15" fill="rgb(241,108,4)" fg:x="759" fg:w="84"/><text x="14.1536%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (84 samples, 1.54%)</title><rect x="13.9036%" y="165" width="1.5387%" height="15" fill="rgb(247,173,49)" fg:x="759" fg:w="84"/><text x="14.1536%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (83 samples, 1.52%)</title><rect x="13.9220%" y="149" width="1.5204%" height="15" fill="rgb(224,114,35)" fg:x="760" fg:w="83"/><text x="14.1720%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (83 samples, 1.52%)</title><rect x="13.9220%" y="133" width="1.5204%" height="15" fill="rgb(245,159,27)" fg:x="760" fg:w="83"/><text x="14.1720%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (83 samples, 1.52%)</title><rect x="13.9220%" y="117" width="1.5204%" height="15" fill="rgb(245,172,44)" fg:x="760" fg:w="83"/><text x="14.1720%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (83 samples, 1.52%)</title><rect x="13.9220%" y="101" width="1.5204%" height="15" fill="rgb(236,23,11)" fg:x="760" fg:w="83"/><text x="14.1720%" y="111.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (385 samples, 7.05%)</title><rect x="15.4424%" y="197" width="7.0526%" height="15" fill="rgb(205,117,38)" fg:x="843" fg:w="385"/><text x="15.6924%" y="207.50">rosalind-..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (385 samples, 7.05%)</title><rect x="15.4424%" y="181" width="7.0526%" height="15" fill="rgb(237,72,25)" fg:x="843" fg:w="385"/><text x="15.6924%" y="191.50">rosalind-..</text></g><g><title>libsystem_kernel.dylib`write (384 samples, 7.03%)</title><rect x="15.4607%" y="165" width="7.0343%" height="15" fill="rgb(244,70,9)" fg:x="844" fg:w="384"/><text x="15.7107%" y="175.50">libsystem..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (38 samples, 0.70%)</title><rect x="22.4950%" y="197" width="0.6961%" height="15" fill="rgb(217,125,39)" fg:x="1228" fg:w="38"/><text x="22.7450%" y="207.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (38 samples, 0.70%)</title><rect x="22.4950%" y="181" width="0.6961%" height="15" fill="rgb(235,36,10)" fg:x="1228" fg:w="38"/><text x="22.7450%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (38 samples, 0.70%)</title><rect x="22.4950%" y="165" width="0.6961%" height="15" fill="rgb(251,123,47)" fg:x="1228" fg:w="38"/><text x="22.7450%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (217 samples, 3.98%)</title><rect x="23.2094%" y="149" width="3.9751%" height="15" fill="rgb(221,13,13)" fg:x="1267" fg:w="217"/><text x="23.4594%" y="159.50">libs..</text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (1,079 samples, 19.77%)</title><rect x="7.4739%" y="245" width="19.7655%" height="15" fill="rgb(238,131,9)" fg:x="408" fg:w="1079"/><text x="7.7239%" y="255.50">rosalind-cafa02e72d05c752`rosal..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (730 samples, 13.37%)</title><rect x="13.8670%" y="229" width="13.3724%" height="15" fill="rgb(211,50,8)" fg:x="757" fg:w="730"/><text x="14.1170%" y="239.50">rosalind-cafa02e72d0..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (729 samples, 13.35%)</title><rect x="13.8853%" y="213" width="13.3541%" height="15" fill="rgb(245,182,24)" fg:x="758" fg:w="729"/><text x="14.1353%" y="223.50">rosalind-cafa02e72d0..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (221 samples, 4.05%)</title><rect x="23.1911%" y="197" width="4.0484%" height="15" fill="rgb(242,14,37)" fg:x="1266" fg:w="221"/><text x="23.4411%" y="207.50">rosa..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (220 samples, 4.03%)</title><rect x="23.2094%" y="181" width="4.0300%" height="15" fill="rgb(246,228,12)" fg:x="1267" fg:w="220"/><text x="23.4594%" y="191.50">rosa..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (220 samples, 4.03%)</title><rect x="23.2094%" y="165" width="4.0300%" height="15" fill="rgb(213,55,15)" fg:x="1267" fg:w="220"/><text x="23.4594%" y="175.50">rosa..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (3 samples, 0.05%)</title><rect x="27.1845%" y="149" width="0.0550%" height="15" fill="rgb(209,9,3)" fg:x="1484" fg:w="3"/><text x="27.4345%" y="159.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;char as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="27.3310%" y="165" width="0.0366%" height="15" fill="rgb(230,59,30)" fg:x="1492" fg:w="2"/><text x="27.5810%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (269 samples, 4.93%)</title><rect x="27.3310%" y="213" width="4.9276%" height="15" fill="rgb(209,121,21)" fg:x="1492" fg:w="269"/><text x="27.5810%" y="223.50">rosali..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (269 samples, 4.93%)</title><rect x="27.3310%" y="197" width="4.9276%" height="15" fill="rgb(220,109,13)" fg:x="1492" fg:w="269"/><text x="27.5810%" y="207.50">rosali..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (269 samples, 4.93%)</title><rect x="27.3310%" y="181" width="4.9276%" height="15" fill="rgb(232,18,1)" fg:x="1492" fg:w="269"/><text x="27.5810%" y="191.50">rosali..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (267 samples, 4.89%)</title><rect x="27.3676%" y="165" width="4.8910%" height="15" fill="rgb(215,41,42)" fg:x="1494" fg:w="267"/><text x="27.6176%" y="175.50">rosali..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (266 samples, 4.87%)</title><rect x="27.3860%" y="149" width="4.8727%" height="15" fill="rgb(224,123,36)" fg:x="1495" fg:w="266"/><text x="27.6360%" y="159.50">rosali..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (266 samples, 4.87%)</title><rect x="27.3860%" y="133" width="4.8727%" height="15" fill="rgb(240,125,3)" fg:x="1495" fg:w="266"/><text x="27.6360%" y="143.50">rosali..</text></g><g><title>libsystem_kernel.dylib`write (265 samples, 4.85%)</title><rect x="27.4043%" y="117" width="4.8544%" height="15" fill="rgb(205,98,50)" fg:x="1496" fg:w="265"/><text x="27.6543%" y="127.50">libsys..</text></g><g><title>libsystem_kernel.dylib`write (631 samples, 11.56%)</title><rect x="32.2953%" y="181" width="11.5589%" height="15" fill="rgb(205,185,37)" fg:x="1763" fg:w="631"/><text x="32.5453%" y="191.50">libsystem_kernel...</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (636 samples, 11.65%)</title><rect x="32.2587%" y="213" width="11.6505%" height="15" fill="rgb(238,207,15)" fg:x="1761" fg:w="636"/><text x="32.5087%" y="223.50">rosalind-cafa02e7..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (636 samples, 11.65%)</title><rect x="32.2587%" y="197" width="11.6505%" height="15" fill="rgb(213,199,42)" fg:x="1761" fg:w="636"/><text x="32.5087%" y="207.50">rosalind-cafa02e7..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (3 samples, 0.05%)</title><rect x="43.8542%" y="181" width="0.0550%" height="15" fill="rgb(235,201,11)" fg:x="2394" fg:w="3"/><text x="44.1042%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (37 samples, 0.68%)</title><rect x="43.9091%" y="213" width="0.6778%" height="15" fill="rgb(207,46,11)" fg:x="2397" fg:w="37"/><text x="44.1591%" y="223.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (37 samples, 0.68%)</title><rect x="43.9091%" y="197" width="0.6778%" height="15" fill="rgb(241,35,35)" fg:x="2397" fg:w="37"/><text x="44.1591%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (37 samples, 0.68%)</title><rect x="43.9091%" y="181" width="0.6778%" height="15" fill="rgb(243,32,47)" fg:x="2397" fg:w="37"/><text x="44.1591%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (344 samples, 6.30%)</title><rect x="44.6968%" y="165" width="6.3015%" height="15" fill="rgb(247,202,23)" fg:x="2440" fg:w="344"/><text x="44.9468%" y="175.50">libsyste..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="50.9984%" y="165" width="0.0183%" height="15" fill="rgb(219,102,11)" fg:x="2784" fg:w="1"/><text x="51.2484%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (347 samples, 6.36%)</title><rect x="44.6785%" y="197" width="6.3565%" height="15" fill="rgb(243,110,44)" fg:x="2439" fg:w="347"/><text x="44.9285%" y="207.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (347 samples, 6.36%)</title><rect x="44.6785%" y="181" width="6.3565%" height="15" fill="rgb(222,74,54)" fg:x="2439" fg:w="347"/><text x="44.9285%" y="191.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`DYLD-STUB$$write (1 samples, 0.02%)</title><rect x="51.0167%" y="165" width="0.0183%" height="15" fill="rgb(216,99,12)" fg:x="2785" fg:w="1"/><text x="51.2667%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (354 samples, 6.48%)</title><rect x="44.5869%" y="213" width="6.4847%" height="15" fill="rgb(226,22,26)" fg:x="2434" fg:w="354"/><text x="44.8369%" y="223.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (2 samples, 0.04%)</title><rect x="51.0350%" y="197" width="0.0366%" height="15" fill="rgb(217,163,10)" fg:x="2786" fg:w="2"/><text x="51.2850%" y="207.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (2,381 samples, 43.62%)</title><rect x="7.4739%" y="261" width="43.6160%" height="15" fill="rgb(213,25,53)" fg:x="408" fg:w="2381"/><text x="7.7239%" y="271.50">rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::t..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (1,302 samples, 23.85%)</title><rect x="27.2394%" y="245" width="23.8505%" height="15" fill="rgb(252,105,26)" fg:x="1487" fg:w="1302"/><text x="27.4894%" y="255.50">rosalind-cafa02e72d05c752`std::io::Wri..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (1,302 samples, 23.85%)</title><rect x="27.2394%" y="229" width="23.8505%" height="15" fill="rgb(220,39,43)" fg:x="1487" fg:w="1302"/><text x="27.4894%" y="239.50">rosalind-cafa02e72d05c752`core::fmt::w..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="51.0716%" y="213" width="0.0183%" height="15" fill="rgb(229,68,48)" fg:x="2788" fg:w="1"/><text x="51.3216%" y="223.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="51.0899%" y="245" width="0.0183%" height="15" fill="rgb(252,8,32)" fg:x="2789" fg:w="1"/><text x="51.3399%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`write (315 samples, 5.77%)</title><rect x="51.1449%" y="133" width="5.7703%" height="15" fill="rgb(223,20,43)" fg:x="2792" fg:w="315"/><text x="51.3949%" y="143.50">libsyst..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (316 samples, 5.79%)</title><rect x="51.1449%" y="165" width="5.7886%" height="15" fill="rgb(229,81,49)" fg:x="2792" fg:w="316"/><text x="51.3949%" y="175.50">rosalin..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (316 samples, 5.79%)</title><rect x="51.1449%" y="149" width="5.7886%" height="15" fill="rgb(236,28,36)" fg:x="2792" fg:w="316"/><text x="51.3949%" y="159.50">rosalin..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="56.9152%" y="133" width="0.0183%" height="15" fill="rgb(249,185,26)" fg:x="3107" fg:w="1"/><text x="57.1652%" y="143.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (319 samples, 5.84%)</title><rect x="51.1083%" y="197" width="5.8436%" height="15" fill="rgb(249,174,33)" fg:x="2790" fg:w="319"/><text x="51.3583%" y="207.50">rosalin..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (318 samples, 5.83%)</title><rect x="51.1266%" y="181" width="5.8252%" height="15" fill="rgb(233,201,37)" fg:x="2791" fg:w="318"/><text x="51.3766%" y="191.50">rosalin..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="56.9335%" y="165" width="0.0183%" height="15" fill="rgb(221,78,26)" fg:x="3108" fg:w="1"/><text x="57.1835%" y="175.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (320 samples, 5.86%)</title><rect x="51.1083%" y="229" width="5.8619%" height="15" fill="rgb(250,127,30)" fg:x="2790" fg:w="320"/><text x="51.3583%" y="239.50">rosalin..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (320 samples, 5.86%)</title><rect x="51.1083%" y="213" width="5.8619%" height="15" fill="rgb(230,49,44)" fg:x="2790" fg:w="320"/><text x="51.3583%" y="223.50">rosalin..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (1 samples, 0.02%)</title><rect x="56.9518%" y="197" width="0.0183%" height="15" fill="rgb(229,67,23)" fg:x="3109" fg:w="1"/><text x="57.2018%" y="207.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (554 samples, 10.15%)</title><rect x="56.9701%" y="229" width="10.1484%" height="15" fill="rgb(249,83,47)" fg:x="3110" fg:w="554"/><text x="57.2201%" y="239.50">rosalind-cafa02..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (553 samples, 10.13%)</title><rect x="56.9885%" y="213" width="10.1301%" height="15" fill="rgb(215,43,3)" fg:x="3111" fg:w="553"/><text x="57.2385%" y="223.50">rosalind-cafa02..</text></g><g><title>libsystem_kernel.dylib`write (552 samples, 10.11%)</title><rect x="57.0068%" y="197" width="10.1117%" height="15" fill="rgb(238,154,13)" fg:x="3112" fg:w="552"/><text x="57.2568%" y="207.50">libsystem_kerne..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (16 samples, 0.29%)</title><rect x="67.1185%" y="229" width="0.2931%" height="15" fill="rgb(219,56,2)" fg:x="3664" fg:w="16"/><text x="67.3685%" y="239.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (16 samples, 0.29%)</title><rect x="67.1185%" y="213" width="0.2931%" height="15" fill="rgb(233,0,4)" fg:x="3664" fg:w="16"/><text x="67.3685%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (16 samples, 0.29%)</title><rect x="67.1185%" y="197" width="0.2931%" height="15" fill="rgb(235,30,7)" fg:x="3664" fg:w="16"/><text x="67.3685%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (326 samples, 5.97%)</title><rect x="67.4116%" y="181" width="5.9718%" height="15" fill="rgb(250,79,13)" fg:x="3680" fg:w="326"/><text x="67.6616%" y="191.50">libsyste..</text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (3,599 samples, 65.93%)</title><rect x="7.4739%" y="277" width="65.9278%" height="15" fill="rgb(211,146,34)" fg:x="408" fg:w="3599"/><text x="7.7239%" y="287.50">rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (1,218 samples, 22.31%)</title><rect x="51.0899%" y="261" width="22.3118%" height="15" fill="rgb(228,22,38)" fg:x="2789" fg:w="1218"/><text x="51.3399%" y="271.50">rosalind-cafa02e72d05c752`std::io::..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (1,217 samples, 22.29%)</title><rect x="51.1083%" y="245" width="22.2935%" height="15" fill="rgb(235,168,5)" fg:x="2790" fg:w="1217"/><text x="51.3583%" y="255.50">rosalind-cafa02e72d05c752`core::fmt..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (327 samples, 5.99%)</title><rect x="67.4116%" y="229" width="5.9901%" height="15" fill="rgb(221,155,16)" fg:x="3680" fg:w="327"/><text x="67.6616%" y="239.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (327 samples, 5.99%)</title><rect x="67.4116%" y="213" width="5.9901%" height="15" fill="rgb(215,215,53)" fg:x="3680" fg:w="327"/><text x="67.6616%" y="223.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (327 samples, 5.99%)</title><rect x="67.4116%" y="197" width="5.9901%" height="15" fill="rgb(223,4,10)" fg:x="3680" fg:w="327"/><text x="67.6616%" y="207.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="73.3834%" y="181" width="0.0183%" height="15" fill="rgb(234,103,6)" fg:x="4006" fg:w="1"/><text x="73.6334%" y="191.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (179 samples, 3.28%)</title><rect x="73.4017%" y="245" width="3.2790%" height="15" fill="rgb(227,97,0)" fg:x="4007" fg:w="179"/><text x="73.6517%" y="255.50">ros..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (179 samples, 3.28%)</title><rect x="73.4017%" y="229" width="3.2790%" height="15" fill="rgb(234,150,53)" fg:x="4007" fg:w="179"/><text x="73.6517%" y="239.50">ros..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (179 samples, 3.28%)</title><rect x="73.4017%" y="213" width="3.2790%" height="15" fill="rgb(228,201,54)" fg:x="4007" fg:w="179"/><text x="73.6517%" y="223.50">ros..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (179 samples, 3.28%)</title><rect x="73.4017%" y="197" width="3.2790%" height="15" fill="rgb(222,22,37)" fg:x="4007" fg:w="179"/><text x="73.6517%" y="207.50">ros..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (178 samples, 3.26%)</title><rect x="73.4200%" y="181" width="3.2607%" height="15" fill="rgb(237,53,32)" fg:x="4008" fg:w="178"/><text x="73.6700%" y="191.50">ros..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (178 samples, 3.26%)</title><rect x="73.4200%" y="165" width="3.2607%" height="15" fill="rgb(233,25,53)" fg:x="4008" fg:w="178"/><text x="73.6700%" y="175.50">ros..</text></g><g><title>libsystem_kernel.dylib`write (178 samples, 3.26%)</title><rect x="73.4200%" y="149" width="3.2607%" height="15" fill="rgb(210,40,34)" fg:x="4008" fg:w="178"/><text x="73.6700%" y="159.50">lib..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (417 samples, 7.64%)</title><rect x="76.6807%" y="245" width="7.6388%" height="15" fill="rgb(241,220,44)" fg:x="4186" fg:w="417"/><text x="76.9307%" y="255.50">rosalind-c..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (416 samples, 7.62%)</title><rect x="76.6990%" y="229" width="7.6204%" height="15" fill="rgb(235,28,35)" fg:x="4187" fg:w="416"/><text x="76.9490%" y="239.50">rosalind-c..</text></g><g><title>libsystem_kernel.dylib`write (416 samples, 7.62%)</title><rect x="76.6990%" y="213" width="7.6204%" height="15" fill="rgb(210,56,17)" fg:x="4187" fg:w="416"/><text x="76.9490%" y="223.50">libsystem_..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Formatter::pad_integral (1 samples, 0.02%)</title><rect x="84.3195%" y="245" width="0.0183%" height="15" fill="rgb(224,130,29)" fg:x="4603" fg:w="1"/><text x="84.5695%" y="255.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (8 samples, 0.15%)</title><rect x="84.3378%" y="245" width="0.1465%" height="15" fill="rgb(235,212,8)" fg:x="4604" fg:w="8"/><text x="84.5878%" y="255.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (8 samples, 0.15%)</title><rect x="84.3378%" y="229" width="0.1465%" height="15" fill="rgb(223,33,50)" fg:x="4604" fg:w="8"/><text x="84.5878%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 0.15%)</title><rect x="84.3378%" y="213" width="0.1465%" height="15" fill="rgb(219,149,13)" fg:x="4604" fg:w="8"/><text x="84.5878%" y="223.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (220 samples, 4.03%)</title><rect x="84.4843%" y="229" width="4.0300%" height="15" fill="rgb(250,156,29)" fg:x="4612" fg:w="220"/><text x="84.7343%" y="239.50">rosa..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (220 samples, 4.03%)</title><rect x="84.4843%" y="213" width="4.0300%" height="15" fill="rgb(216,193,19)" fg:x="4612" fg:w="220"/><text x="84.7343%" y="223.50">rosa..</text></g><g><title>libsystem_kernel.dylib`write (220 samples, 4.03%)</title><rect x="84.4843%" y="197" width="4.0300%" height="15" fill="rgb(216,135,14)" fg:x="4612" fg:w="220"/><text x="84.7343%" y="207.50">libs..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (221 samples, 4.05%)</title><rect x="84.4843%" y="245" width="4.0484%" height="15" fill="rgb(241,47,5)" fg:x="4612" fg:w="221"/><text x="84.7343%" y="255.50">rosa..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.02%)</title><rect x="88.5144%" y="229" width="0.0183%" height="15" fill="rgb(233,42,35)" fg:x="4832" fg:w="1"/><text x="88.7644%" y="239.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (4,426 samples, 81.08%)</title><rect x="7.4739%" y="293" width="81.0771%" height="15" fill="rgb(231,13,6)" fg:x="408" fg:w="4426"/><text x="7.7239%" y="303.50">rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (827 samples, 15.15%)</title><rect x="73.4017%" y="277" width="15.1493%" height="15" fill="rgb(207,181,40)" fg:x="4007" fg:w="827"/><text x="73.6517%" y="287.50">rosalind-cafa02e72d05c7..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (827 samples, 15.15%)</title><rect x="73.4017%" y="261" width="15.1493%" height="15" fill="rgb(254,173,49)" fg:x="4007" fg:w="827"/><text x="73.6517%" y="271.50">rosalind-cafa02e72d05c7..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (1 samples, 0.02%)</title><rect x="88.5327%" y="245" width="0.0183%" height="15" fill="rgb(221,1,38)" fg:x="4833" fg:w="1"/><text x="88.7827%" y="255.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="88.5510%" y="277" width="0.0183%" height="15" fill="rgb(206,124,46)" fg:x="4834" fg:w="1"/><text x="88.8010%" y="287.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;&amp;T as core::fmt::Display&gt;::fmt (79 samples, 1.45%)</title><rect x="88.5693%" y="261" width="1.4472%" height="15" fill="rgb(249,21,11)" fg:x="4835" fg:w="79"/><text x="88.8193%" y="271.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (79 samples, 1.45%)</title><rect x="88.5693%" y="245" width="1.4472%" height="15" fill="rgb(222,201,40)" fg:x="4835" fg:w="79"/><text x="88.8193%" y="255.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;itertools::format::FormatWith&lt;I,F&gt; as core::fmt::Display&gt;::fmt (79 samples, 1.45%)</title><rect x="88.5693%" y="229" width="1.4472%" height="15" fill="rgb(235,61,29)" fg:x="4835" fg:w="79"/><text x="88.8193%" y="239.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (79 samples, 1.45%)</title><rect x="88.5693%" y="213" width="1.4472%" height="15" fill="rgb(219,207,3)" fg:x="4835" fg:w="79"/><text x="88.8193%" y="223.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::Write::write_char (79 samples, 1.45%)</title><rect x="88.5693%" y="197" width="1.4472%" height="15" fill="rgb(222,56,46)" fg:x="4835" fg:w="79"/><text x="88.8193%" y="207.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (79 samples, 1.45%)</title><rect x="88.5693%" y="181" width="1.4472%" height="15" fill="rgb(239,76,54)" fg:x="4835" fg:w="79"/><text x="88.8193%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (79 samples, 1.45%)</title><rect x="88.5693%" y="165" width="1.4472%" height="15" fill="rgb(231,124,27)" fg:x="4835" fg:w="79"/><text x="88.8193%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (172 samples, 3.15%)</title><rect x="90.0165%" y="229" width="3.1508%" height="15" fill="rgb(249,195,6)" fg:x="4914" fg:w="172"/><text x="90.2665%" y="239.50">lib..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (173 samples, 3.17%)</title><rect x="90.0165%" y="261" width="3.1691%" height="15" fill="rgb(237,174,47)" fg:x="4914" fg:w="173"/><text x="90.2665%" y="271.50">ros..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (173 samples, 3.17%)</title><rect x="90.0165%" y="245" width="3.1691%" height="15" fill="rgb(206,201,31)" fg:x="4914" fg:w="173"/><text x="90.2665%" y="255.50">ros..</text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="93.1672%" y="229" width="0.0183%" height="15" fill="rgb(231,57,52)" fg:x="5086" fg:w="1"/><text x="93.4172%" y="239.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (90 samples, 1.65%)</title><rect x="93.1856%" y="261" width="1.6487%" height="15" fill="rgb(248,177,22)" fg:x="5087" fg:w="90"/><text x="93.4356%" y="271.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (89 samples, 1.63%)</title><rect x="93.2039%" y="245" width="1.6303%" height="15" fill="rgb(215,211,37)" fg:x="5088" fg:w="89"/><text x="93.4539%" y="255.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (89 samples, 1.63%)</title><rect x="93.2039%" y="229" width="1.6303%" height="15" fill="rgb(241,128,51)" fg:x="5088" fg:w="89"/><text x="93.4539%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (89 samples, 1.63%)</title><rect x="93.2039%" y="213" width="1.6303%" height="15" fill="rgb(227,165,31)" fg:x="5088" fg:w="89"/><text x="93.4539%" y="223.50"></text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec (4,772 samples, 87.42%)</title><rect x="7.4556%" y="309" width="87.4153%" height="15" fill="rgb(228,167,24)" fg:x="407" fg:w="4772"/><text x="7.7056%" y="319.50">rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::to_dot_rec</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (345 samples, 6.32%)</title><rect x="88.5510%" y="293" width="6.3198%" height="15" fill="rgb(228,143,12)" fg:x="4834" fg:w="345"/><text x="88.8010%" y="303.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (344 samples, 6.30%)</title><rect x="88.5693%" y="277" width="6.3015%" height="15" fill="rgb(249,149,8)" fg:x="4835" fg:w="344"/><text x="88.8193%" y="287.50">rosalind..</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (2 samples, 0.04%)</title><rect x="94.8342%" y="261" width="0.0366%" height="15" fill="rgb(243,35,44)" fg:x="5177" fg:w="2"/><text x="95.0842%" y="271.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::fs::OpenOptions::_open (217 samples, 3.98%)</title><rect x="94.8709%" y="309" width="3.9751%" height="15" fill="rgb(246,89,9)" fg:x="5179" fg:w="217"/><text x="95.1209%" y="319.50">rosa..</text></g><g><title>libsystem_kernel.dylib`__open (217 samples, 3.98%)</title><rect x="94.8709%" y="293" width="3.9751%" height="15" fill="rgb(233,213,13)" fg:x="5179" fg:w="217"/><text x="95.1209%" y="303.50">libs..</text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::build_trie (5,053 samples, 92.56%)</title><rect x="7.3640%" y="325" width="92.5627%" height="15" fill="rgb(233,141,41)" fg:x="402" fg:w="5053"/><text x="7.6140%" y="335.50">rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::build_trie</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (59 samples, 1.08%)</title><rect x="98.8459%" y="309" width="1.0808%" height="15" fill="rgb(239,167,4)" fg:x="5396" fg:w="59"/><text x="99.0959%" y="319.50"></text></g><g><title>rosalind-cafa02e72d05c752`core::fmt::write (58 samples, 1.06%)</title><rect x="98.8643%" y="293" width="1.0625%" height="15" fill="rgb(209,217,16)" fg:x="5397" fg:w="58"/><text x="99.1143%" y="303.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (58 samples, 1.06%)</title><rect x="98.8643%" y="277" width="1.0625%" height="15" fill="rgb(219,88,35)" fg:x="5397" fg:w="58"/><text x="99.1143%" y="287.50"></text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_all (58 samples, 1.06%)</title><rect x="98.8643%" y="261" width="1.0625%" height="15" fill="rgb(220,193,23)" fg:x="5397" fg:w="58"/><text x="99.1143%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`write (58 samples, 1.06%)</title><rect x="98.8643%" y="245" width="1.0625%" height="15" fill="rgb(230,90,52)" fg:x="5397" fg:w="58"/><text x="99.1143%" y="255.50"></text></g><g><title>rosalind-cafa02e72d05c752`proptest::test_runner::runner::call_test (5,456 samples, 99.95%)</title><rect x="0.0000%" y="357" width="99.9450%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="367.50">rosalind-cafa02e72d05c752`proptest::test_runner::runner::call_test</text></g><g><title>rosalind-cafa02e72d05c752`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call (5,456 samples, 99.95%)</title><rect x="0.0000%" y="341" width="99.9450%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="5456"/><text x="0.2500%" y="351.50">rosalind-cafa02e72d05c752`core::ops::function::impls::_&lt;impl core::ops::function::Fn&lt;A&gt; for &amp;F&gt;::call</text></g><g><title>rosalind-cafa02e72d05c752`std::io::Write::write_fmt (1 samples, 0.02%)</title><rect x="99.9267%" y="325" width="0.0183%" height="15" fill="rgb(230,138,44)" fg:x="5455" fg:w="1"/><text x="100.1767%" y="335.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;proptest::strategy::unions::TupleUnion&lt;((u32,alloc::sync::Arc&lt;A&gt;),(u32,alloc::sync::Arc&lt;B&gt;))&gt; as proptest::strategy::traits::Strategy&gt;::new_tree (1 samples, 0.02%)</title><rect x="99.9450%" y="325" width="0.0183%" height="15" fill="rgb(235,182,43)" fg:x="5456" fg:w="1"/><text x="100.1950%" y="335.50"></text></g><g><title>rosalind-cafa02e72d05c752`proptest::test_runner::runner::TestRunner::partial_clone (1 samples, 0.02%)</title><rect x="99.9450%" y="309" width="0.0183%" height="15" fill="rgb(242,16,51)" fg:x="5456" fg:w="1"/><text x="100.1950%" y="319.50"></text></g><g><title>rosalind-cafa02e72d05c752`proptest::test_runner::rng::TestRng::new_rng_seed (1 samples, 0.02%)</title><rect x="99.9450%" y="293" width="0.0183%" height="15" fill="rgb(248,9,4)" fg:x="5456" fg:w="1"/><text x="100.1950%" y="303.50"></text></g><g><title>rosalind-cafa02e72d05c752`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.02%)</title><rect x="99.9450%" y="277" width="0.0183%" height="15" fill="rgb(210,31,22)" fg:x="5456" fg:w="1"/><text x="100.1950%" y="287.50"></text></g><g><title>rosalind-cafa02e72d05c752`proptest::test_runner::runner::TestRunner::partial_clone (1 samples, 0.02%)</title><rect x="99.9634%" y="325" width="0.0183%" height="15" fill="rgb(239,54,39)" fg:x="5457" fg:w="1"/><text x="100.2134%" y="335.50"></text></g><g><title>all (5,459 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="559.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,459 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="543.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,459 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="527.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rosalind-cafa02e72d05c752`std::sys::pal::unix::thread::Thread::new::thread_start (5,459 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="511.50">rosalind-cafa02e72d05c752`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>rosalind-cafa02e72d05c752`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,459 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="495.50">rosalind-cafa02e72d05c752`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>rosalind-cafa02e72d05c752`std::sys::backtrace::__rust_begin_short_backtrace (5,459 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(215,77,49)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="479.50">rosalind-cafa02e72d05c752`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rosalind-cafa02e72d05c752`test::run_test::_{{closure}} (5,459 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="463.50">rosalind-cafa02e72d05c752`test::run_test::_{{closure}}</text></g><g><title>rosalind-cafa02e72d05c752`test::__rust_begin_short_backtrace (5,459 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="447.50">rosalind-cafa02e72d05c752`test::__rust_begin_short_backtrace</text></g><g><title>rosalind-cafa02e72d05c752`core::ops::function::FnOnce::call_once (5,459 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="431.50">rosalind-cafa02e72d05c752`core::ops::function::FnOnce::call_once</text></g><g><title>rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::test::prop_test_trie (5,459 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(246,46,29)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="415.50">rosalind-cafa02e72d05c752`rosalind::string::suffix_trie_suffix_links::test::prop_test_trie</text></g><g><title>rosalind-cafa02e72d05c752`proptest::test_runner::runner::TestRunner::run_in_process (5,459 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(246,185,52)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="399.50">rosalind-cafa02e72d05c752`proptest::test_runner::runner::TestRunner::run_in_process</text></g><g><title>rosalind-cafa02e72d05c752`proptest::test_runner::runner::TestRunner::gen_and_run_case (5,459 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(252,136,11)" fg:x="0" fg:w="5459"/><text x="0.2500%" y="383.50">rosalind-cafa02e72d05c752`proptest::test_runner::runner::TestRunner::gen_and_run_case</text></g><g><title>rosalind-cafa02e72d05c752`proptest::tuple::_&lt;impl proptest::strategy::traits::Strategy for (A,B)&gt;::new_tree (3 samples, 0.05%)</title><rect x="99.9450%" y="357" width="0.0550%" height="15" fill="rgb(219,138,53)" fg:x="5456" fg:w="3"/><text x="100.1950%" y="367.50"></text></g><g><title>rosalind-cafa02e72d05c752`&lt;proptest::collection::VecStrategy&lt;T&gt; as proptest::strategy::traits::Strategy&gt;::new_tree (3 samples, 0.05%)</title><rect x="99.9450%" y="341" width="0.0550%" height="15" fill="rgb(211,51,23)" fg:x="5456" fg:w="3"/><text x="100.1950%" y="351.50"></text></g><g><title>rosalind-cafa02e72d05c752`rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.02%)</title><rect x="99.9817%" y="325" width="0.0183%" height="15" fill="rgb(247,221,28)" fg:x="5458" fg:w="1"/><text x="100.2317%" y="335.50"></text></g></svg></svg>